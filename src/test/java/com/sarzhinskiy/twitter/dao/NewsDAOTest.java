package com.sarzhinskiy.twitter.dao;

import java.sql.Timestamp;
import java.util.List;

import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.sarzhinskiy.twitter.bean.news.News;
import com.sarzhinskiy.twitter.bean.news.NewsImage;
import com.sarzhinskiy.twitter.dao.NewsDAO;

import static org.junit.Assert.*;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={"/SpringXMLConfigTest.xml"})
public class NewsDAOTest {

	private static final String SELECT_COUNT_NEWS = "select count(*) from news";
	private static final String SELECT_COUNT_NEWS_IMAGE = "select count(*) from news_image";
	private static final String DEFAULT_NEWS_INFO = "Interesting News";
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	private NewsDAO newsDAO;
	
	@Before 
	public void clearDBTable() {
		jdbcTemplate.execute("delete from news");
		jdbcTemplate.execute("delete from news_image");
	}
	
	@Test
	public void testCreateNoException() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
	}
	
	@Test
	public void testCreate() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_NEWS, Integer.class);
		assertEquals(1, size);
	}
	
	@Test
	public void testCreateAutoGeneratedId() {
		News news = new News("A");
		newsDAO.create(news);
		assertNotNull(news.getId());
	}
	
	@Test
	public void testCreateCorrectFilledField() {
		News news = new News(DEFAULT_NEWS_INFO);
		news.setDateTime(DateTime.now());
		int nLike = 5;
		int status  = 1;
		news.setLikeNumber(nLike);
		news.setStatus(status);
		newsDAO.create(news);

		int createdStatus = jdbcTemplate.queryForObject("select status from news where id="
				+ news.getId(), Integer.class);
		assertEquals(status, createdStatus);
		
		int createdNLike = jdbcTemplate.queryForObject("select like_number from news where id="
				+ news.getId(), Integer.class);
		assertEquals(nLike, createdNLike);
		
		String createdInfo = jdbcTemplate.queryForObject("select text from news where id="
				+ news.getId(), String.class);
		assertEquals(DEFAULT_NEWS_INFO, createdInfo);
		
		Timestamp timestamp = jdbcTemplate.queryForObject("select timestamp from news where id="
				+ news.getId(), Timestamp.class);
		DateTime createdDateTime = new DateTime(timestamp);
		assertEquals(news.getDateTime(), createdDateTime);
	}
	
	@Test
	public void testUpdateModifyCorrect() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		
		int newStatus = 3;
		news.setStatus(newStatus);
		String newText = "A";
		news.setText(newText);
		newsDAO.update(news);
		
		int updatedStatus = jdbcTemplate.queryForObject("select status from news where id=" + news.getId(), Integer.class);
		assertEquals(newStatus, updatedStatus);
		
		String updatedText = jdbcTemplate.queryForObject("select text from news where id=" + news.getId(), String.class);
		assertEquals(newText, updatedText);
	}
	
	@Test
	public void testUpdateLikeNumber() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		int nLike = 5;
		news.setLikeNumber(nLike);
		
		newsDAO.update(news);
		int updatedLikes = jdbcTemplate.queryForObject("select like_number from news where id=" + news.getId(), Integer.class);
		assertEquals(nLike, updatedLikes);
	}
	
	@Test
	public void testFindNewsById() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		
		Long id = news.getId();
		News findedNews = newsDAO.findById(id);
		assertNotNull(findedNews);
		assertEquals(id, findedNews.getId());
	}
	
	@Test
	public void testFindAllNews() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		news = new News("SA");
		newsDAO.create(news);
		
		List<News> listNews = newsDAO.findAll();
		assertEquals(2, listNews.size());
	}
	
	@Test
	public void testFindLastOne() {
		//must be delay because hsql save only milliseconds, and two news could be added in DB with the same milliseconds
		News news1 = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news1);
		sleepOneMillisecond();
		
		String text = "SA";
		News news2 = new News(text);
		newsDAO.create(news2);
		
		int nLast = 1;
		List<News> listNews = newsDAO.findLast(nLast);
		assertEquals(nLast, listNews.size());
		assertEquals(news2, listNews.get(0));
	}
	
	@Test
	public void testFindLastNoExceptionWithoutNews() {
		int nLast = 2;
		List<News> listNews = newsDAO.findLast(nLast);
		assertEquals(0, listNews.size());
	}
	
	@Test
	public void testFindLastTwo() {
		//must be delay because hsql save only milliseconds, and two news could be added in DB with the same milliseconds
		News news1 = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news1);
		sleepOneMillisecond();
		String text2 = "SA";
		News news2 = new News(text2);
		newsDAO.create(news2);
		sleepOneMillisecond();
		String text3 = "SQ";
		News news3 = new News(text3);
		newsDAO.create(news3);

		int nLast = 2;
		List<News> listNews = newsDAO.findLast(nLast);
		assertEquals(nLast, listNews.size());
		
		assertEquals(news3, listNews.get(0));
		assertEquals(news2, listNews.get(1));
	}
	
	@Test
	public void testFindMostPopular() {
		News news1 = new News(DEFAULT_NEWS_INFO);
		news1.setLikeNumber(5);
		newsDAO.create(news1);
		String text2 = "SA";
		News news2 = new News(text2);
		newsDAO.create(news2);
		
		int nPopular = 1;
		List<News> listNews = newsDAO.findMostPopular(nPopular);
		assertEquals(nPopular, listNews.size());
		assertEquals(news1, listNews.get(0));
	}
	
	@Test
	public void testFindTwoMostPopular() {
		News news1 = new News(DEFAULT_NEWS_INFO);
		news1.setLikeNumber(5);
		newsDAO.create(news1);
		newsDAO.create(new News("A"));
		String text2 = "SA";
		News news2 = new News(text2);
		news2.setLikeNumber(15);
		newsDAO.create(news2);
		
		int nPopular = 2;
		List<News> listNews = newsDAO.findMostPopular(nPopular);
		assertEquals(nPopular, listNews.size());
		assertEquals(news2, listNews.get(0));
		assertEquals(news1, listNews.get(1));
	}
	
	@Test
	public void testRemoveNoException() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		newsDAO.remove(news.getId());
	}
	
	@Test
	public void testRemove() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		newsDAO.remove(news.getId());
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_NEWS, Integer.class);
		assertEquals(0, size);
	}
	
	@Test
	public void testTryRemoveNotExistNewsNoException() {
		long notExistID = 1000000;
		newsDAO.remove(notExistID);
	}
	
	@Test
	public void testRemoveByIdNotDeleteOtherNews() {
		News news1 = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news1);
		News news2 = new News("A");
		newsDAO.create(news2);
		
		newsDAO.remove(news1.getId());
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_NEWS, Integer.class);
		assertEquals(1, size);
		
		int countNews2 = jdbcTemplate.queryForObject("select count(*) from news where id=" + news2.getId(), Integer.class);
		assertEquals(1, countNews2);
	}
	
	@Test
	public void testRemoveAll() {
		News news1 = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news1);
		News news2 = new News("A");
		newsDAO.create(news2);
		
		newsDAO.removeAll();
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_NEWS, Integer.class);
		assertEquals(0, size);
	}
	
	@Test
	public void testInsertImageInExistNewsNoException() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		
		NewsImage image = new NewsImage();
		image.setImageFile("images//image1.jpg");
		image.setName("image1");
		image.setComment("smiles");
		newsDAO.insertImage(news, image);
	}
	
	@Test
	public void testInsertImageCorrectInExistNews() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		
		NewsImage image = new NewsImage();
		image.setImageFile("images//image1.jpg");
		image.setName("cool image");
		newsDAO.insertImage(news, image);
		
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_NEWS_IMAGE, Integer.class);
		assertEquals(1, size);
		
		assertEquals(1, news.getImages().size());
	}
	
	@Test
	public void testUpdateExistNewsImage() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		
		NewsImage image = new NewsImage();
		image.setImageFile("images//image1.jpg");
		image.setName("image1");
		newsDAO.insertImage(news, image);
		
		String comment = "smiles";
		image.setComment(comment);
		String newImageName = "new name!"; 
		image.setName(newImageName);
		newsDAO.updateImage(image);
		
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_NEWS_IMAGE, Integer.class);
		assertEquals(1, size);
		String updatedName = jdbcTemplate.queryForObject("select name from news_image where id=" + image.getId(), String.class);
		assertEquals(newImageName, updatedName);
		
		String updatedComment = jdbcTemplate.queryForObject("select comment from news_image where id=" + image.getId(), String.class);
		assertEquals(comment, updatedComment);
	}
	
	@Test
	public void testFindImageById() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		
		NewsImage image = new NewsImage();
		image.setImageFile("images//image1.jpg");
		image.setName("image1");
		newsDAO.insertImage(news, image);
		
		
		NewsImage findedImage = newsDAO.findImage(image.getId());
		assertNotNull(findedImage);
		assertEquals(image.getId(), findedImage.getId());
	}
	
	@Test
	public void testFindImageByNews() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		
		NewsImage image = new NewsImage();
		image.setImageFile("images//image1.jpg");
		image.setName("image1");
		newsDAO.insertImage(news, image);
		
		List<NewsImage> listImages = newsDAO.findImagesByNews(news.getId());
		assertNotNull(listImages);
		assertEquals(1, listImages.size());
		assertEquals(image.getId(), listImages.get(0).getId());
	}
	
	@Test
	public void testFindImagesByNewsCorrectLogic() {
		News news1 = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news1);
		
		News news2 = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news2);
		
		NewsImage image1 = new NewsImage();
		image1.setImageFile("images//image1.jpg");
		image1.setName("beatiful smiles");
		
		NewsImage image2 = new NewsImage();
		image2.setImageFile("images//image2.jpg");		
		
		NewsImage image3 = new NewsImage();
		image3.setImageFile("images//image3.gif");
		image3.setName("illusion");
		
		//add image1 and image2 to news1,  and add image3 to news2
		newsDAO.insertImage(news1, image1);
		newsDAO.insertImage(news1, image2);
		newsDAO.insertImage(news2, image3);
		
		List<NewsImage> listImagesFirstNews = newsDAO.findImagesByNews(news1.getId());
		assertNotNull(listImagesFirstNews);
		assertEquals(2, listImagesFirstNews.size());
		
		List<NewsImage> listImagesSecondNews = newsDAO.findImagesByNews(news2.getId());
		assertNotNull(listImagesSecondNews);
		assertEquals(1, listImagesSecondNews.size());
		assertEquals(image3.getId(), listImagesSecondNews.get(0).getId());
	}
	
	@Test
	public void testRemoveNewsImage() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		
		NewsImage image = new NewsImage();
		image.setImageFile("images//image1.jpg");
		image.setName("beatiful smiles");
		newsDAO.insertImage(news, image);

		newsDAO.removeImage(news, image.getId());
		int imageSize = jdbcTemplate.queryForObject(SELECT_COUNT_NEWS_IMAGE, Integer.class);
		assertEquals(0, imageSize);
		
		assertEquals(0, news.getImages().size());
	}
	
	@Test
	public void testRemoveAllNewsImages() {
		News news = new News(DEFAULT_NEWS_INFO);
		newsDAO.create(news);
		NewsImage image1 = new NewsImage();
		image1.setImageFile("images//image1.jpg");
		image1.setName("beatiful smiles");
		newsDAO.insertImage(news, image1);
		
		NewsImage image2 = new NewsImage();
		image2.setImageFile("images//image2.jpg");
		newsDAO.insertImage(news, image2);
		
		newsDAO.removeAllNewsImages();
		int imageSize = jdbcTemplate.queryForObject(SELECT_COUNT_NEWS_IMAGE, Integer.class);
		assertEquals(0, imageSize);
	}
	
	
	
	private void sleepOneMillisecond() {
		try {
			Thread.sleep(1);
		}
		catch (InterruptedException exc) {
			exc.printStackTrace();
		}
	}
	
}
