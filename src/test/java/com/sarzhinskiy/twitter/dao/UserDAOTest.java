package com.sarzhinskiy.twitter.dao;

import java.sql.Date;
import java.util.List;

import javax.annotation.PostConstruct;

import org.joda.time.LocalDate;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.sarzhinskiy.twitter.bean.city.City;
import com.sarzhinskiy.twitter.bean.country.Country;
import com.sarzhinskiy.twitter.bean.news.NewsImage;
import com.sarzhinskiy.twitter.bean.user.Gender;
import com.sarzhinskiy.twitter.bean.user.User;
import com.sarzhinskiy.twitter.bean.user.UserAdditionalInfo;
import com.sarzhinskiy.twitter.bean.user.UserImage;
import com.sarzhinskiy.twitter.bean.user.UserRole;
import com.sarzhinskiy.twitter.dao.UserDAO;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={"/SpringXMLConfigTest.xml"})
public class UserDAOTest {
	
	private static final String SELECT_COUNT_USERS = "select count(*) from user";
	private static final String SELECT_COUNT_USER_IMAGES = "select count(*) from user_image";
	private static final String SELECT_COUNT_USER_OBSERVERS = "select count(*) from user_observer";
	
	private static final String DEFAULT_USER_EMAIL = "cool-twit@gmail.com";
	private static final String DEFAULT_USER_PASSWORD = "password";
	private static final String DEFAULT_USER_NAME = "name";
	private static final String DEFAULT_USER_SURNAME = "surname";
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	private UserDAO userDAO;
	
	@Autowired
	private CityDAO cityDAO;
	
	@Autowired
	private CountryDAO countryDAO;
		
	@PostConstruct
	public void fillUserRoleTable() {
		jdbcTemplate.execute("delete from role");
		jdbcTemplate.execute("insert into role values(0, 'admin')");
		jdbcTemplate.execute("insert into role values(1, 'user')");
		jdbcTemplate.execute("insert into role values(2, 'default')");
	}	
	
	@Before
	public void clearDBTables() {
		jdbcTemplate.execute("delete from city");
		jdbcTemplate.execute("delete from country");
		jdbcTemplate.execute("delete from user_additional_info");
		jdbcTemplate.execute("delete from user_image");
		jdbcTemplate.execute("delete from user_observer");
		jdbcTemplate.execute("delete from user");
	}
	
	@Test
	public void testCreateUserNoException() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
	}
	
	@Test
	public void testCreateUser() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		user.setSurname(DEFAULT_USER_SURNAME);
		user.setName(DEFAULT_USER_NAME);
		userDAO.create(user);
		
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_USERS, Integer.class);
		assertEquals(1, size);
		
		String createdName = jdbcTemplate.queryForObject("select name from user", String.class);
		String createdSurname = jdbcTemplate.queryForObject("select surname from user", String.class);
		assertEquals(DEFAULT_USER_NAME, createdName);
		assertEquals(DEFAULT_USER_SURNAME, createdSurname);
	}
	
	@Test
	public void testCreateAutoGeneratedId() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		assertNotNull(user.getId());
	}
	
	@Test
	public void testFillUserAdditionalInfoCorrect() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		String cityName = "A";
		String countryName = "C";
		Country country = new Country(countryName);
		countryDAO.create(country);
		City city = new City(cityName, countryName);
		cityDAO.create(city);
		
		UserAdditionalInfo userInfo = new UserAdditionalInfo(user.getId());
		LocalDate birthday = new LocalDate().withYear(1990).withMonthOfYear(1).withDayOfMonth(1);
		userInfo.setBirthday(birthday);
		String phone = "555-55-55";
		userInfo.setPhone(phone);
		int status = 1;
		userInfo.setStatus(status);
		String aboutYourself = "life is beautiful";
		userInfo.setAboutYourself(aboutYourself);
		String address = "Five Avenue";
		userInfo.setAddress(address);
		Gender gender = Gender.MALE;
		userInfo.setGender(gender);
		userInfo.setCity(cityName);
		userInfo.setCountry(countryName);
		
		userDAO.updateAdditionalInfo(userInfo);
		Integer updatedCityId = jdbcTemplate.queryForObject("select city_id from user_additional_info", Integer.class);
		assertEquals(city.getId(), updatedCityId);
		
		Integer updatedCountryId = jdbcTemplate.queryForObject("select country_id from user_additional_info", Integer.class);
		assertEquals(country.getId(), updatedCountryId);
		
		LocalDate updatedBirthday = new LocalDate(jdbcTemplate.queryForObject("select birthday from user_additional_info", Date.class));
		assertEquals(birthday, updatedBirthday);
		
		String updatedPhone = jdbcTemplate.queryForObject("select phone from user_additional_info", String.class);
		assertEquals(phone, updatedPhone);
		
		int updatedStatus = jdbcTemplate.queryForObject("select status from user_additional_info", Integer.class);
		assertEquals(status, updatedStatus);
		
		String updatedAboutYourself = jdbcTemplate.queryForObject("select about_yourself from user_additional_info", String.class);
		assertEquals(aboutYourself, updatedAboutYourself);
		
		String updatedAddress = jdbcTemplate.queryForObject("select address from user_additional_info", String.class);
		assertEquals(updatedAddress, address);
		
		boolean updatedGenderInDB = jdbcTemplate.queryForObject("select gender from user_additional_info", Boolean.class);
		Gender updatedGender = Gender.MALE;
		if (updatedGenderInDB) {
			updatedGender = Gender.FEMALE;
		}
		assertEquals(gender, updatedGender);
	}
	
	@Test
	public void testUserUpdateCorrect() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		user.setName(DEFAULT_USER_NAME);
		userDAO.create(user);
		
		user.setBlocked(true);
		String newName = "asasa";
		user.setName(newName);
		String newSurname = "as";
		user.setSurname(newSurname);
		UserRole role = UserRole.ADMIN;
		user.setRole(role);
		userDAO.update(user);
		
		String updatedName = jdbcTemplate.queryForObject("select name from user", String.class);
		assertEquals(newName, updatedName);
		String updatedSurname = jdbcTemplate.queryForObject("select surname from user", String.class);
		assertEquals(newSurname, updatedSurname);
		String updatedRole = jdbcTemplate.queryForObject("select role.name from role, user where role.id=user.role_id and user.id=" 
				+ user.getId(), String.class);
		assertEquals(role.toString().toLowerCase(), updatedRole);
		boolean isBlocked = jdbcTemplate.queryForObject("select is_blocked from user", Boolean.class);
		assertEquals(true, isBlocked);
	}
	
	@Test
	public void testFindUserById() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		
		User findedUser = userDAO.findById(user.getId());
		assertNotNull(findedUser);
		assertEquals(user, findedUser);
	}
	
	@Test
	public void testTryFindNotExistUserIdNoException() {
		Long notExistUserId = 111L;
		User findedUser = userDAO.findById(notExistUserId);
		assertEquals(null, findedUser);
	}
	
	@Test
	public void testFindUserByEmail() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		
		userDAO.create(new User("em.com", "em.com"));
		User findedUser = userDAO.findByEmail(DEFAULT_USER_EMAIL);
		assertNotNull(findedUser);
		assertEquals(user, findedUser);
		
	}
	
	@Test
	public void testFindUsersByFullNameCorrect() {
		User user1 = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		user1.setName(DEFAULT_USER_NAME);
		user1.setSurname(DEFAULT_USER_SURNAME);
		userDAO.create(user1);
		
		User user2 = new User("em.com", "em");
		user2.setName(DEFAULT_USER_NAME);
		user2.setSurname("surrn");
		userDAO.create(user2);
		
		User user3 = new User("em2.com", "em2");
		userDAO.create(user3);
		
		String fullName = DEFAULT_USER_NAME + " " + DEFAULT_USER_SURNAME;
		List<User> users = userDAO.findByFullName(fullName);
		assertEquals(1, users.size());
		
		fullName = DEFAULT_USER_NAME;
		users = userDAO.findByFullName(fullName);
		assertEquals(2, users.size());
		
		fullName = "surrn";
		users = userDAO.findByFullName(fullName);
		assertEquals(1, users.size());
	}
	
	@Test
	public void testFindPasswordCipherByEmail() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		String findedPassCipher = userDAO.findPasswordCipherByEmail(DEFAULT_USER_EMAIL);
		assertEquals(DEFAULT_USER_PASSWORD, findedPassCipher);
	}
	
	@Test
	public void testFindUserAdditionalInfo() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		
		UserAdditionalInfo userInfo = new UserAdditionalInfo(user.getId());
		String phone = "555-55-55";
		userInfo.setPhone(phone);
		userDAO.updateAdditionalInfo(userInfo);
		
		UserAdditionalInfo findedInfo = userDAO.findUserAdditionalInfoById(user.getId());
		assertNotNull(findedInfo);
		assertEquals(user.getId(), userInfo.getId());
		assertEquals(phone, findedInfo.getPhone());
	}
	
	@Test
	public void testFindUsersByDiffFieldsWithFullNameCorrect() {
		countryDAO.create(new Country("Ukraine"));
		countryDAO.create(new Country("South Korea"));
		cityDAO.create(new City("Kiev", "Ukraine"));
		cityDAO.create(new City("Seoul", "South Korea"));
		
		User user1 = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		user1.setName(DEFAULT_USER_NAME);
		user1.setSurname(DEFAULT_USER_SURNAME);
		userDAO.create(user1);
		UserAdditionalInfo info1 = new UserAdditionalInfo(user1.getId());
		info1.setCountry("Ukraine");
		info1.setCity("Kiev");
		info1.setStatus(1);
		userDAO.updateAdditionalInfo(info1);
		
		User user2 = new User("em.com", "em");
		user2.setName(DEFAULT_USER_NAME);
		user2.setSurname("surrn");
		userDAO.create(user2);
		UserAdditionalInfo info2 = new UserAdditionalInfo(user2.getId());
		info2.setCountry("South Korea");
		info2.setStatus(1);
		userDAO.updateAdditionalInfo(info2);
		
		User user3 = new User("em2.com", "em2");
		userDAO.create(user3);
		
		List<User> users = userDAO.findByAllFields(DEFAULT_USER_NAME, null, "Ukraine", null, null);
		assertEquals(1, users.size());
		
		users = userDAO.findByAllFields(DEFAULT_USER_NAME, null, "South Korea", "", 1);
		assertEquals(1, users.size());
		
		users = userDAO.findByAllFields(DEFAULT_USER_SURNAME + " " + DEFAULT_USER_NAME, 
				null, "Ukraine", "Lviv", null);
		assertEquals(0, users.size());
	}
	
	@Test
	public void testFindUsersByDiffFieldsWithoutFullNameCorrect() {
		countryDAO.create(new Country("Ukraine"));
		countryDAO.create(new Country("South Korea"));
		cityDAO.create(new City("Kiev", "Ukraine"));
		cityDAO.create(new City("Lviv", "Ukraine"));
		cityDAO.create(new City("Seoul", "South Korea"));
		
		User user1 = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user1);
		UserAdditionalInfo info1 = new UserAdditionalInfo(user1.getId());
		info1.setCountry("Ukraine");
		info1.setCity("Kiev");
		info1.setStatus(1);
		info1.setGender(Gender.FEMALE);
		userDAO.updateAdditionalInfo(info1);
		
		User user2 = new User("em@com", "em");
		userDAO.create(user2);
		UserAdditionalInfo info2 = new UserAdditionalInfo(user2.getId());
		info2.setCountry("South Korea");
		info2.setStatus(2);
		info2.setGender(Gender.MALE);
		userDAO.updateAdditionalInfo(info2);
		
		User user3 = new User("em2.com", "em2");
		userDAO.create(user3);
		UserAdditionalInfo info3 = new UserAdditionalInfo(user3.getId());
		info3.setCountry("Ukraine");
		info3.setCity("Lviv");
		info3.setStatus(1);
		userDAO.updateAdditionalInfo(info3);
		
		List<User> users = userDAO.findByAllFields(null, null, "Ukraine", null, null);
		assertEquals(2, users.size());
		
		users = userDAO.findByAllFields(null, null, "Ukraine", "Kiev", null);
		assertEquals(1, users.size());
		
		users = userDAO.findByAllFields(null, Gender.FEMALE, "South Korea", null, null);
		assertEquals(0, users.size());
		
		int findStatus = 1;
		users = userDAO.findByAllFields(null, null, "Ukraine", null, findStatus);
		assertEquals(2, users.size());
	}
	
	@Test
	public void testAddObservedUser() {
		User user1 = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user1);
		User user2 = new User("em.com", "em");
		user2.setSurname("surrn");
		userDAO.create(user2);
		
		userDAO.addObservedUser(user1, user2);
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_USER_OBSERVERS, Integer.class);
		assertEquals(1, size);
	}
	
	@Test
	public void testFindObservedUsers() {
		User user1 = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user1);
		User user2 = new User("em.com", "em");
		userDAO.create(user2);
		User user3 = new User("aaa@mail.com", "aaa");
		userDAO.create(user3);
		
		userDAO.addObservedUser(user1, user2);
		userDAO.addObservedUser(user1, user3);
		userDAO.addObservedUser(user3, user1);
		
		long observerId = user1.getId();
		List<User> users = userDAO.findAllObservedUser(observerId);
		assertNotNull(users);
		assertEquals(2, users.size());
		
		observerId = user3.getId();
		users = userDAO.findAllObservedUser(observerId);
		assertNotNull(users);
		assertEquals(1, users.size());
		assertEquals(user1.getId(), users.get(0).getId());
	}
	
	@Test
	public void testInsertUserImageNoException() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		
		UserImage image = new UserImage("image", user.getId());
		image.setImageFile("images//image1.jpg");
		userDAO.insertImage(user, image);
	}
	
	@Test
	public void testInsertUserImage() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		
		UserImage image = new UserImage("image", user.getId());
		image.setImageFile("images//image1.jpg");
		image.setComment("smiles");
		userDAO.insertImage(user, image);
		
		int imageSize = jdbcTemplate.queryForObject(SELECT_COUNT_USER_IMAGES, Integer.class);
		assertEquals(1, imageSize);
	}
	
	@Test(expected=Exception.class)
	public void testInsertUserImageWithoutUserThrowException() {
		UserImage image = new UserImage();
		image.setImageFile("images//image1.jpg");
		userDAO.insertImage(null, image);
	}
	
	@Test
	public void testUpdateExistUserImage() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
	
		UserImage image = new UserImage();
		image.setUserId(user.getId());
		image.setImageFile("images//image1.jpg");
		userDAO.insertImage(user, image);
		
		String comment = "smile";
		image.setComment(comment);
		String name = "image";
		image.setName(name);
		String albumName = "cool";
		image.setAlbumName(albumName);
		userDAO.updateImage(image);
		
		String updatedName = jdbcTemplate.queryForObject("select name from user_image", String.class);
		assertEquals(name, updatedName);
		String updatedAlbumName = jdbcTemplate.queryForObject("select album_name from user_image", String.class);
		assertEquals(albumName, updatedAlbumName);
		String updatedComment = jdbcTemplate.queryForObject("select comment from user_image", String.class);
		assertEquals(comment, updatedComment);
	}
	
	@Test
	public void testFindUserImageByImageId() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
	
		UserImage image = new UserImage();
		image.setUserId(user.getId());
		image.setImageFile("images//image1.jpg");
		userDAO.insertImage(user, image);
		
		UserImage findedImage = userDAO.findImage(image.getImageId());
		assertNotNull(findedImage);
		assertEquals(image, findedImage);
		
	}
	
	@Test
	public void testFindNotExistImageNoException() {
		long notExistImageId = 111L;
		userDAO.findImage(notExistImageId);
	}
	
	@Test
	public void testFindImagesByUser() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		long userId = user.getId();
		
		UserImage image = new UserImage("image name", userId);
		image.setImageFile("images//image1.jpg");
		userDAO.insertImage(user, image);
		image = new UserImage("image!!!", userId);
		image.setImageFile("images//image2.jpg");
		userDAO.insertImage(user, image);
		
		List<UserImage> images = userDAO.findImagesByUser(userId);
		assertNotNull(images);
		assertEquals(2, images.size());
	}
	
	@Test
	public void testRemoveUserNoException() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		userDAO.removeUser(user.getId());
	}
	
	@Test
	public void testRemoveUserNotRemoveOtherUser() {
		User user1 = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user1);
		User user2 = new User("sss", "sss");
		userDAO.create(user2);
		
		userDAO.removeUser(user1.getId());
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_USERS, Integer.class);
		assertEquals(1, size);
		Long findedId = jdbcTemplate.queryForObject("select id from user", Long.class);
		assertEquals(user2.getId(), findedId);
	}
	
	@Test
	public void testRemoveAllUsers() {
		User user1 = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user1);
		User user2 = new User("sss", "sss");
		userDAO.create(user2);
		
		userDAO.removeAll();
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_USERS, Integer.class);
		assertEquals(0, size);
	}
	
	@Test
	public void testRemoveObservedUser() {
		User user1 = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user1);
		User user2 = new User("sss", "sss");
		userDAO.create(user2);
		
		userDAO.addObservedUser(user1, user2);
		userDAO.removeObservedUser(user1, user2);
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_USER_OBSERVERS, Integer.class);
		assertEquals(0, size);
	}
	
	@Test
	public void testRemoveAllObservedUsers() {
		User user1 = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user1);
		User user2 = new User("sss", "sss");
		userDAO.create(user2);
		User user3 = new User("aa", "aa");
		userDAO.create(user3);
		
		userDAO.addObservedUser(user1, user2);
		userDAO.addObservedUser(user1, user3);
		userDAO.addObservedUser(user3, user2);
		
		userDAO.removeAllObservedUsers();
		int size = jdbcTemplate.queryForObject(SELECT_COUNT_USER_OBSERVERS, Integer.class);
		assertEquals(0, size);
	}
	
	@Test
	public void testRemoveImage() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		
		UserImage image = new UserImage("image name", user.getId());
		image.setImageFile("images//image1.jpg");
		userDAO.insertImage(user, image);
		
		userDAO.removeImage(user, image.getImageId());
		int imageSize = jdbcTemplate.queryForObject(SELECT_COUNT_USER_IMAGES, Integer.class);
		assertEquals(0, imageSize);
	}
	
	@Test
	public void testRemoveAllImages() {
		User user = new User(DEFAULT_USER_EMAIL, DEFAULT_USER_PASSWORD);
		userDAO.create(user);
		
		UserImage image = new UserImage("image name", user.getId());
		image.setImageFile("images//image1.jpg");
		userDAO.insertImage(user, image);
		image = new UserImage("image!", user.getId());
		image.setImageFile("images//image2.jpg");
		userDAO.insertImage(user, image);
		
		userDAO.removeAllImages();
		int imageSize = jdbcTemplate.queryForObject(SELECT_COUNT_USER_IMAGES, Integer.class);
		assertEquals(0, imageSize);
	}
	
}
